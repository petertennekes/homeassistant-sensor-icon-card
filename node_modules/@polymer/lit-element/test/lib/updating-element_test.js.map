{"version":3,"file":"updating-element_test.js","sourceRoot":"","sources":["../../src/test/lib/updating-element_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {UpdatingElement} from '../../lib/updating-element.js';\n\nimport {generateElementName} from '../test-helpers.js';\n\nconst assert = chai.assert;\n\nsuite('UpdatingElement', () => {\n  let container: HTMLElement;\n\n  setup(() => {\n    container = document.createElement('div');\n    document.body.appendChild(container);\n  });\n\n  teardown(() => {\n    if (container && container.parentNode) {\n      container.parentNode.removeChild(container);\n    }\n  });\n\n  test('can override _schedule()', async () => {\n    class A extends UpdatingElement {\n      scheduleCalled = false;\n      updateCalled = false;\n\n      _scheduleUpdate() {\n        this.scheduleCalled = true;\n        return new Promise((r) => setTimeout(r, 10));\n      }\n\n      update(changedProperties: Map<PropertyKey, unknown>) {\n        this.updateCalled = true;\n        super.update(changedProperties);\n      }\n    }\n    customElements.define(generateElementName(), A);\n\n    const a = new A();\n    container.appendChild(a);\n    assert.isTrue(a.scheduleCalled);\n\n    // update is not called synchronously\n    assert.isFalse(a.updateCalled);\n\n    // update is not called after a microtask\n    await 0;\n    assert.isFalse(a.updateCalled);\n\n    // update is not called after short timeout\n    await new Promise((r) => setTimeout(r));\n    assert.isFalse(a.updateCalled);\n\n    // update is called after long timeout\n    await new Promise((r) => setTimeout(r, 20));\n    assert.isTrue(a.updateCalled);\n  });\n\n  test('overriding _schedule() still allows nested invalidations', async () => {\n    class A extends UpdatingElement {\n      scheduleCalledCount = 0;\n      updatedCalledCount = 0;\n\n      _scheduleUpdate() {\n        this.scheduleCalledCount++;\n        return new Promise((r) => setTimeout(r));\n      }\n\n      updated(_changedProperties: Map<PropertyKey, unknown>) {\n        this.updatedCalledCount++;\n        // trigger a nested invalidation just once\n        if (this.updatedCalledCount === 1) {\n          this.requestUpdate();\n        }\n      }\n    }\n    customElements.define(generateElementName(), A);\n\n    const a = new A();\n    container.appendChild(a);\n    assert.equal(a.scheduleCalledCount, 1, 'a');\n    assert.equal(a.updatedCalledCount, 0);\n\n    const updateComplete1 = a.updateComplete;\n    await updateComplete1;\n    assert.equal(a.updatedCalledCount, 1, 'b');\n    assert.equal(a.scheduleCalledCount, 2, 'c');\n\n    const updateComplete2 = a.updateComplete;\n    assert.notStrictEqual(updateComplete1, updateComplete2);\n\n    await updateComplete2;\n    assert.equal(a.updatedCalledCount, 2);\n    assert.equal(a.scheduleCalledCount, 2);\n  });\n});\n"]}